********************************************************************************************
********Exercise 1 ==> Commands to create an EKS cluster********
********************************************************************************************
Step 3
-Copy the following commands, and then enter them in the shell one at a time to download eksctl:

curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp

sudo mv /tmp/eksctl /usr/bin/

Step 4
-Copy the following command, and then enter it in the shell to create an EKSÂ cluster named lab4cluster with two nodes:

eksctl create cluster --name lab4cluster --region us-east-1 --zones=us-east-1a,us-east-1b --version 1.28   --nodegroup-name lab4nodes --node-private-networking --node-type t3.small --nodes 2 --nodes-min 1 --nodes-max 3 --managed

********************************************************************************************
******Exercise 1 ==> Commands to create a VPC, a subnet, an internet gateway, and all required routes******
********************************************************************************************
Step 1
-Copy the following command, and then enter it in the shell to create a new VPC named FWebVPC:

VPC_ID=$(aws ec2 create-vpc --cidr-block 172.16.0.0/16 --tag-specifications "ResourceType=vpc,Tags=[{Key=Name,Value=FWebVPC}]" --query 'Vpc.{VpcId:VpcId}' --output text)

Step 2
-Copy the following command, and then enter it in the shell to create a subnet named PublicSubnet:

Subnet1=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 172.16.0.0/24 --availability-zone us-east-1a --tag-specifications "ResourceType=subnet,Tags=[{Key=Name,Value=PublicSubnet}]" --query Subnet.SubnetId --output text)

Step 3
-Copy the following command, and then enter it in the shell  to create an internet gateway:

IGW_ID=$(aws ec2 create-internet-gateway --query InternetGateway.InternetGatewayId --query 'InternetGateway.{InternetGatewayId:InternetGatewayId}' --output text)

Step 4
-Copy the following command, and then enter it in the shell  to attach the internet gateway to the VPC that you created:

aws ec2 attach-internet-gateway --vpc-id $VPC_ID --internet-gateway-id $IGW_ID

Step 5
-Copy the following command, and then enter it in the shell  to create a security group associated with the VPC that you created:

FWEB_SGID=$(aws ec2 create-security-group --group-name FWebSecGrp --description "FortiWeb Security Group" --vpc-id $VPC_ID --tag-specifications "ResourceType=security-group,Tags=[{Key=Name,Value=FWebSecGrp}]" --query GroupId --output text)

Step 6
-Copy the following command, and then enter it in the shell  to add four traffic rules to the security group that you created:

aws ec2 authorize-security-group-ingress --group-id $FWEB_SGID --ip-permissions IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges="[{CidrIp=0.0.0.0/0}]" IpProtocol=tcp,FromPort=80,ToPort=80,IpRanges="[{CidrIp=0.0.0.0/0}]" IpProtocol=tcp,FromPort=443,ToPort=443,IpRanges="[{CidrIp=0.0.0.0/0}]" IpProtocol=tcp,FromPort=8443,ToPort=8443,IpRanges="[{CidrIp=0.0.0.0/0}]" IpProtocol=-1,FromPort=-1,ToPort=-1,IpRanges="[{CidrIp=192.168.0.0/16}]"

Step 8
-Copy the following command, and then enter it in the shell to find the route table ID associated to the VPC that you created and save it in a variable named RT_ID:

RT_ID=$(aws ec2 describe-route-tables --filters Name=vpc-id,Values=$VPC_ID --query 'RouteTables[*].Associations[*].{RouteTableId:RouteTableId}' --output text)

Step 9
-Copy the following command, and then enter it in the shell  to add a default route to the route table from the previous step:

aws ec2 create-route --route-table-id $RT_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_ID
