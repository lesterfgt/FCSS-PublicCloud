********************************************************************************************
*****Exercise 3 ==> To install the FortiWeb ingress controller ****
********************************************************************************************
Step 1
-Copy the following command, and then enter it  in the shell to download the Helm installation script:

curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh

Step 2
-Copy the following command, and then enter it in the shell to give executable permissions to the Helm installation script:

chmod 700 get_helm.sh

Step 3
-Copy the following command, and then enter it in the shell to run the  Helm installation script:

./get_helm.sh

Step 4
-Copy the following command, and then enter it in the shell to verify that  Helm is installed:

helm version

Step 5
-Copy the following command, and then enter it in the shell to download the FortiWeb ingress controller repository:

helm repo add FortiWeb-ingress-controller https://fortinet.github.io/fortiweb-ingress/

Step 6
-Copy the following command, and then enter it in the shell to update the repository:

helm repo update

Step 7
-Copy the following command, and then enter it in the shell to install the chart in the default namespace, with the release name lab4:

helm install  lab4 --namespace default FortiWeb-ingress-controller/fwb-k8s-ctrl

Step 8
-Copy the following command, and then enter it in the shell to create a new secret with the FortiWeb credentials:

kubectl create secret generic fwb-login -n default --from-literal=username=admin --from-literal=password=Fortipassword123

Step 9
-Copy the following commands, and then enter them in the shell to deploy the pods and expose two services:

kubectl apply -f https://raw.githubusercontent.com/fortinet/fortiweb-ingress/main/service_examples/service1.yaml

Step 10
-Copy the following commands, and then enter them in the shell to deploy the pods and expose two services:

kubectl apply -f https://raw.githubusercontent.com/fortinet/fortiweb-ingress/main/service_examples/service2.yaml

Step 11
-Copy the following command, and then enter it in the shell to verify the services are deployed:

kubectl get service

Step 12
-Copy the following command, and then enter it in the shell to download the ingress configuration file:

wget https://raw.githubusercontent.com/fortinet/fortiweb-ingress/main/ingress_examples/simple-fanout-example.yaml

Step 13
-Copy the following command, and then enter it in the shell to edit the ingress configuration file:

nano simple-fanout-example.yaml

Step 17
-Copy the following command, and then enter it in the shell to apply the ingress configuration file:

kubectl apply -f simple-fanout-example.yaml

********************************************************************************************
*****Exercise 3 ==> To verify that the FortiWeb configuration is updated ****
********************************************************************************************

Step 5
- Copy the following command, and then enter it in the shell to edit its hosts file:

sudo nano /etc/hosts

Step 9
- Copy the following command, and then enter it in the shell to test connectivity to the service1 page:

curl --insecure https://training.fortinet.lab/info

Step 11
- Copy the following command, and then enter it in the shell to test connectivity to the service2 page:

curl --insecure https://training.fortinet.lab/hello

nano simple-fanout-example.yaml

********************************************************************************************
*****Exercise 3 ==> To create a third service in preparation for the next exercise ****
********************************************************************************************
Step 1
-Copy the following command, and then enter it in the shell to deploy a new pod and expose a new service:

kubectl apply -f https://raw.githubusercontent.com/fortinet/\
fortiweb-ingress/main/service_examples/service3.yaml

Step 2
-Copy the following command, and then enter it in the shell to identify the port number assigned to the new service:

kubectl get service
